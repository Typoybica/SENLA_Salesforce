/**
 * Created by shake on 14.10.2022.
 */
@RestResource(urlMapping='/Property/v1/*')
global class PropertyREST {

    @HttpGet
    global static String getProperty() {

        String reply;
        String path = RestContext.request.requestURI.substringAfterLast('v1/');

        if (path.contains('by_owner?owner=')) reply = getPropertiesByOwner(path.substringAfterLast('by_owner?owner='));
        else if (path.contains('report/')) {
            reply = getDeals(
                    path.substringAfterLast('report/').substringBefore('?'),
                    path.substringAfterLast('startDate=').substringBefore('&'),
                    path.substringAfterLast('endDate=').substringBefore('&'),
                    path.substringAfterLast('dealType='));
        }
        else reply = 'Bad path';

        return reply;
    }

    @HttpPost
    global static Property__c createProperty() {
        PropertyWrapper wrapper = (PropertyWrapper)
                JSON.deserialize(RestContext.request.requestBody.toString(), PropertyWrapper.class);

        return PropertyManager.createProperties(wrapper, true);
    }

    @HttpPut
    global static String updatePropertyOwner() {
        Utils.UpdatePropertyOwner wrapPut = (Utils.UpdatePropertyOwner)
                JSON.deserialize(RestContext.request.requestBody.toString(), Utils.UpdatePropertyOwner.class);

        Id ownerID = [SELECT Contact__c FROM Property__c WHERE Id = :wrapPut.propertyId].Contact__c;
        Contact owner = [SELECT Id, FirstName, LastName, Email FROM Contact WHERE Id =:ownerID];

        owner.Id = String.isNotEmpty(wrapPut.owner.sfId) ? wrapPut.owner.sfId : owner.Id;
        owner.FirstName = String.isNotEmpty(wrapPut.owner.firstName) ? wrapPut.owner.firstName : owner.FirstName;
        owner.LastName = String.isNotEmpty(wrapPut.owner.lastName) ? wrapPut.owner.lastName : owner.LastName;
        owner.Email = String.isNotEmpty(wrapPut.owner.email) ? wrapPut.owner.email : owner.Email;

        update owner;
        return JSON.serialize(owner);
    }

    private static String getDeals(String propertyId, String startDate, String endDate, String dealType) {
        Date startRent = Date.valueOf(startDate);
        Date endRent = Date.valueOf(endDate);

        List<Deal__c> deals = [
                SELECT Id, Buyer__c, RecordTypeId, Property__c, Seller__c,
                        Seller__r.Email, Seller__r.LastName, Seller__r.FirstName, Rent_price__c
                FROM Deal__c
                WHERE Property__c =: propertyId
                AND RecordTypeId = :dealType
                AND Start_rent__c >= :startRent
                AND End_rent__c <= :endRent];

        Utils.Response response = new Utils.Response(startRent, endRent, deals);

        return JSON.serialize(response, true);
    }

    private static String getPropertiesByOwner(Id ownerId) {
        List<PropertyWrapper> props = new List<PropertyWrapper>();

        List<Property__c> properties = [
                SELECT Contact__c, Address__c, City__c, Country__c, Rental_price_per_month__c, Selling_Price__c
                FROM Property__c
                WHERE Id =: ownerId];

        for (Property__c property : properties) {
           PropertyWrapper wrapper = new PropertyWrapper();
            wrapper.country = property.Country__c;
            wrapper.city = property.City__c;
            wrapper.owner = property.Contact__c;
            wrapper.rent = property.Rental_price_per_month__c;
            wrapper.selling = property.Selling_Price__c;
            wrapper.address = property.Address__c;
            props.add(wrapper);
        }

        return JSON.serialize(props, true);
    }
    public class PropertyWrapper {
        public Id owner {get; set;}
        public String address {get; set;}
        public String city {get; set;}
        public String country {get; set;}
        public Decimal rent {get; set;}
        public Decimal selling {get; set;}
    }
}